Setter 사용 금지 및 생성자 접근 제어
Setter를 무분별하게 남용하다 보면 여기저기서 객체(엔티티)의 값을 변경할 수 있으므로 객체의 일관성을 보장할 수 없습니다.
그리고 setter는 그 의도를 알기 힘들다고 생각합니다.


예를 들어 아래의 코드의 경우 멤버 객체를 set매소드를 통해 변경하는데 무엇을 하는건지 한번에 알 수 없습니다.(예제의 경우 간단한 변경이지만 복잡해질 경우 객체의 값을 변경하는 행위가 무엇을 위해 변경하는지 한 눈에 알기 힘들 수 있습니다.)

Member member = new Member();
member.setName("신이삼");
member.setTel("01050503453");
...
member.set...
아래의 코드 처럼 객체에서 매소드를 제공하여 변경하면 변경 의도를 한번에 알 수 있고, 객체 자신의 값을 자신이 변경하는 것이 객체 지향 관점에도 더 맞는다고 생각합니다.

// 멤버의 기본정보를 수정한다는 것을 한눈에 알 수 있다
member.changeBasicInfo("신이삼","01050502323");
//Member 엔티티 내부에 매서드 생성
public void changeBasicInfo(String name, String tel) {
    this.name = name;
    this.tel = tel;
}

객체의 일관성을 유지하기 위해 객체 생성 시점에 값들을 넣어줌으로써 Setter 사용을 줄일 수 있습니다.

// 객체의 생성자 설정 (필드가 많을경우 롬복의 @Builder 사용하면 좋다)
@Builder
public Member(String username, String password, String name, String tel, Address address) {
        this.username = username;
        this.password = password;
        this.name = name;
        this.tel = tel;
        this.address = address;
    }
// 객체 생성 시 값 세팅(빌더패턴 사용)
Member member = Member.Builder()
      .username("name")
      .password("1234")
      .name("name);
      .tel("01012345677")
      .address(address)
      .build();

아래와 같이 기본 생성자 접근자를 protected로 변경하면 new Member() 사용을 막을 수 있어 객체의 일관성을 더 유지할 수 있습니다.
(protected로 설정하는 이유는 JPA 기본 스펙 상 기본 생성자가 필요한데 protected로 제어하는 것 까지 허용되기 때문입니다.)

  // Member 엔티티
@Entity
@Getter
@Table(name = "member")
public class Member{

    // 기본 생성자 protected로 접근 제어
    protected Member(){};
    
    ...
}

롬복을 사용한다면 @NoArgsconstructor 어노테이션 설정을 통해 간단하게 설정할 수 있습니다.

@Entity
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@Getter
@Table(name = "member")
public class Member {

}
무분별한 Setter 사용금지는 엔티티 뿐 아니라 객체 생성 및 변경 시 모두 해당하는 부분입니다. 객체의 일관성을 유지할 수 있어야 프로그램의 유지 보수성을 끌어 올릴 수 있기 때문에 일급 컬렉션 사용 등 많은 개발자들이 객체의 일관성을 유지하기 위해 노력을 기울이고 있다고 생각합니다.

https://velog.io/@aidenshin/%EB%82%B4%EA%B0%80-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-JPA-%EC%97%94%ED%8B%B0%ED%8B%B0-%EC%9E%91%EC%84%B1-%EC%9B%90%EC%B9%99



(1)*************** 영속성은 @Transactional 단위로 이루어진다.

class AuthFailureHandlerTest {
    @Autowired
    LoginFailRepository loginFailRepository;

    @Autowired
    EntityManager entityManager;

    @Transactional
    @Test
    @DisplayName("로그인 실패 카운트를 merge한다.")
    void merge_login_fail_count() {
        String tryId = "test1";

        //초기에는 entityManager에 캐쉬된 정보가 없기 때문에 db에 select 해온다.
        LoginFailEntity persistEntity = entityManager.find(LoginFailEntity.class, tryId);
        log.info(">>> persistEntity 111: " + persistEntity);

        //메서드에 @Transactional 에노테이션이 있으면 entityManager에 캐쉬된 정보를 가져오고, 없으면 db에서 새로가져온다.
        LoginFailEntity persistEntity2 = entityManager.find(LoginFailEntity.class, tryId);
        log.info(">>> persistEntity 222: " + persistEntity2);

        //메서드에 @Transactional 에노테이션이 있으면 true, 없으면 false
        log.info(">>> persistEntity equals: " + (persistEntity == persistEntity2));
        

(2)********* Repository.findBy..()를 호출할때 entityManager가 변경을 감지한다?

LoginFailEntity oldEntity = loginFailRepository.findByLoginedId(tryId);
        log.info(">>> oldEntity 111: " + oldEntity);
        persistEntity.updateFailCount();
        log.info(">>> oldEntity 222: " + oldEntity);
        LoginFailEntity oldEntity2 = loginFailRepository.findByLoginedId(tryId); //@Test에서는 이 라인이 없으면 자동감지해서 update 안해줌...
        log.info(">>> oldEntity 333: " + oldEntity);

        //또한 Repository.findBy하면 entityManager가 별개로 생성되나봄 
        (1)****에서는 entityManager에서 동일 키값으로 find할 경우 db에서 select하는게 아니라 entityManager에서 가져오는데 
        Repository.findBy는 키값이 같아도 db에서 select해온다.. 왜.. 같은 entityManager를 사용하지 않지?



트렌잭션이 커밋되는 시점에 엔티티의 데이터가 변경이 되었다면 update 쿼리 실행을 요청합니다.
이는 1차 캐시에 영속화 시점의 스냅샷이 존재하기 때문입니다.

********************* findByLoginedId는 내가 정의한 메서드고 findById는 기존 메서드인데 기존메서드를 쓰면 
영속성이 보장되네..?  아래 코드 실행하면 쿼리 한번만 날라감.

Optional<LoginFailEntity> oldEntity = loginFailRepository.findById(tryId);
        log.info(">>> oldEntity 111: " + oldEntity);
//        entityManager.persist(oldEntity);
        log.info(">>>oldEntity.isPresent(): " + oldEntity.isPresent());
        LoginFailEntity loginFailEntity = oldEntity.orElse(null);
        log.info(">>> loginFailEntity 111: " + loginFailEntity);
        Optional<LoginFailEntity> oldEntity2 = loginFailRepository.findById(tryId);
        log.info(">>> oldEntity 222: " + oldEntity2);
        LoginFailEntity loginFailEntity2 = oldEntity2.orElse(null);
        log.info(">>> loginFailEntity 222: " + loginFailEntity2);

        log.info(">>> persistEntity equals: " + (loginFailEntity == loginFailEntity2));


******1차 캐시가 되는 것은 오직 식별자(findById)로 쿼리할 때만이 가능하다.
식별자가 무엇인가? 바로 @Id 어노테이션을 붙여둔 Key이다.
(근대... findByLoginedId()에서 LoginedId는 식벽자인데 findById가 아니면 1차캐시가 되지 않는다.)


영속성 컨텍스트는 쓰기지연을 지원한다.
한 트랜잭션안에서 이뤄지는 UPDATE나 SAVE의 쿼리를 쓰기지연 저장소에 가지고 있다가 트랜잭션이 커밋되는 순간 한번에 DB에 날리는 것을 말한다.
이로써 얻을 수 있는 장점은 DB커넥션 시간을 줄일 수 있고, 한 트랜잭션이 테이블에 접근하는 시간을 줄일 수 있다는 장점이 있다.


https://velog.io/@junho918/Spring-Data-Jpa-JPA..%EA%B7%B8%EB%9E%98-%EC%95%8C%EA%B2%A0%EC%96%B4..-%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-JPA%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EB%8A%94%EB%8D%B0
*Entity 만들때 유의사항 (https://velog.io/@junho918/Spring-Data-Jpa-JPA..%EA%B7%B8%EB%9E%98-%EC%95%8C%EA%B2%A0%EC%96%B4..-%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-JPA%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EB%8A%94%EB%8D%B0)
@Setter는 실무에서 사용하지 말고, 비즈니스 로직을 반영해서 만들자!

@NoArgsConstructor(access=AccessLevel.PROTECTED) : 기본 생성자는 막아야 하는데, 
jpa에서 프록시를 만들기 위해서는 protected까지는 열어놓아야 함.

@ToString에서 연관관계 매핑되어 있는 친구들은 제외하기.

changeTeam()으로 양방향 연관관계 한번에 처리하기!*
@ManyToOne(fetch = FetchType.LAZY) // 항상 lazy로 처리!
@JoinColumn(name="team_id")
private Team team;
public void changeTeam(Team team) {
      this.team = team;
       //반대쪽의 멤버도 바꿔줘야함.
       team.getMembers().add(this);
    }

2) Team(Entity가 사원이고 팀이란 연관관계로 이루어져있을때)
Member와 Team은 양방향 연관관계로, Member.team이 외래키를 관리하는 주인, Team.members는 연관관계의 주인이 아님.
따라서 @mappedBy 사용하고, Team에서는 읽기만 가능하게.
*단위 테스트(Unit Testing)

영속(영구) 데이터를 액세스하지 않고 테스트를 하려면
서비스 레이어 객체를 스텁하거나 Dao 또는 레파지토리 인터페이스를 mocking하여 테스트할 수 있습니다.

*Mock 객체

-Environment
	org.springframework.mock.env 패키지에는 Environment과 PropertySource 추상화의 모의 구현이 포함되어 있습니다.
	MockEnvironment와 MockPropertySource 는 환경별 특성에 의존하는 코드를 테스트 하는데 유용합니다.

-JNDI
	org.springframework.mock.jndi 패키지에는 JNDI SPI의 부분적인 구현을 포함하고, 
	간단한 독립 실행형 애플리케이션을 위한 JNDI 환경을 설정하는데 사용할 수 있습니다.
	예를 들어 JDBC DataSource 인스턴스가 Java EE 컨테이너에서와 동일한 JNDI 이름에 바인딩되면 
	수정 없이 애플리케이션 코드와 구성을 테스트 시나리오에서 모두 재사용할 수 있습니다.
	또한 org.springframework.mock.jndi 패키지는 Spring Framework 5.2 이후부터 Simple-JNDI와 같은 3rd part 솔루션을  지원하지 않습니다.
  
-Servlet API
	org.springframework.mock.web 패키지에는 웹 컨텍스트, 컨트롤러 및 필터 테스트에 
	유용한 Servlet API 모의 객체들이 포함되어 있습니다. 모의 객체들은 Spring Web MVC Framework에서의 사용을 목표로 하며
	일반적으로 동적 모의 객체(EasyMock), 대체 Servlet API 모의 객체보다 사용이 편리합니다.
	Spring Framework 5.0 이후부터 org.springframework.mock.web 패키지의 모의 객체는 Servlet 4.0 API를 기반으로 합니다.
  스프링 MVC에 대한 통합 테스트 프레임워크를 제공하기 위해 모의 서블릿 API 객체를 기반으로 구축됩니다. (MockMvc를 참조)

-Spring Web Reactive
  org.springframework.mock.http.server.reactive 패키지에는 WebFlux 애플리케이션에서 사용하는
  ServerHttpRequest, ServerHttpResponse의 모의 구현이 포함되어 있습니다.
  org.springframework.mock.web.server 패키지에는 이러한 모의 요청 및 응답 개체에 따라 달라지는
  모의 서버 웹 Exchange가 포함되어 있습니다.
  MockServerHttpRequest, MockServerHttpResponse는 모든 서버별 구현과 동일한 추상 기본 클래스에서 확장되어 동작을 공유합니다.
  예를들어 모의 요청은 변경할 수 없는 인스턴스로 만들어지지만 mutate() 메소드를 사용하면 
  ServerHttpRequest의 수정된 인스턴스를 만들 수 있습니다.
  WebTest Client는 HTTP 서버 없이 WebFlux 응용 프로그램을 테스트할 수 있도록 모의 요청 및 응답을 기반으로 합니다. 
  클라이언트는 실행 중인 서버의 종단 간 테스트에도 사용할 수 있습니다.


*단위 테스트 지원 클래스
- 일반 테스트 유틸리티
  org.springframework.test.util 패키지에는 단위 및 통합 테스트에 사용하기 위한 몇 가지 범용 유틸리티가 포함되어 있습니다.
  
  ReflectionTestUtils은 Relection을 기반으로 하는 유틸 메서드들의 collection입니다. 
  애플리케이션 코드를 테스트할 때 상수의 값을 변경하거나 
  non-pulbic 필드, 메서드, 설정, 라이프사이클 콜백 메서드를 invoke하는 테스트 시나리오에서 사용할 수 있습니다.
  - ORM Framework(JPA, Hibernate 같은)에서 도메인 엔티티의 private나 protected 필드에 접근을 허용합니다.
  - Spring은 private나 protected의 필드, Setter메서드, 설정 메서드들에 대해 종속성 주입을 위한 
    @Autowired, @Inject, @Resource와 같은 Annotation을 지원합니다.
  - 라이프 사이클 콜백 메서드에 @PostConstruct과 @PreDestroy와 같은 Annotation을 사용합니다.

  AopTestUtils은 AOP와 관련된 유틸리티 메서들의 collection입니다.
  AopTestUtils를 사용하면 Spring 프록시 뒤에 숨겨진 하나 이상의 기본 대상 객체에 대한 참조를 가져올 수 있습니다.
  예를들어 EasyMock이나 Mockito와 같은 라이브러리를 활용해 설정한 동적 Mock을 Spring 프록시에 wrapped한 경우 
  Mock 객체에 직접 접근하여 expectations(예측)를 설정해야 할 필요가 있습니다.
  Spring의 core AOP 유틸리티는 AopUtils와 AopProxyUtils를 참조하세요.


  리플렉션이란 객체를 통해 클래스의 정보를 분석해 내는 프로그램 기법을 말한다. 
  클래스의 정보로 클래스의 필드와 메소드 등을 이용할 수 있다.

- 스프링 MVC 테스트 유틸리티
  org.springframework.test.web 패키지에는 Spring MVC ModelAndView 객체를 단위 테스트하기 위한  
  JUNit, TestNG 또는 기타 테스트 프레임워크와 함께 사용할 수 있는 ModelAndViewAssert가 포함되어 있습니다.
  스프링 MVC 컨트롤러  POJO 클래스를 단위 테스트하려면 스프링 API mocks의 MockHttpServletRequest, MockHttpSession 등과 
  ModelAndViewAssert를 조합해서 사용하세요. 
  스프링 MVC WebApplicationContext로 구성된 스프링 MVC와 REST Controller 클래스를 통합 테스트하려면 
  스프링 MVC 테스트 프레임워크(MockMvc)를 사용하십시오.



Integration Testing(통합 테스트)

애플리케이션 서버를 구축하거나 다른 엔터프라이즈 인프라에 연결하지 않고도 일부 통합테스트를 수행할 수 있어야 합니다.
- 스프링 IoC 컨테이너 컨텍스트를 올바르게 wiring합니다.
- JDBC 또는 ORM 툴를 사용하여 데이터를 엑세스 합니다. 여기에는 sql문 hibernate 쿼리, JPA 엔티티 매핑 등이 포함될 수 있습니다.

org.springframework.test 패키지에는 스프링 컨테이너와 통합 테스트를 위한 유용한 클래스들이 포함되어 있습니다. 
이 테스트는 애플리케이션 서버 또는 다른 배포환경에 의존하지 않기 때문에 
애플리케이션 서버에 의존하는 동등한 Selenium 테스트 또는 원격 테스트 보다 훨씬 빠릅니다.

단위 및 통합 테스트 스프링 테스트 프레임워크의 Annotation 위주로 지원됩니다.

테스트 컨텍스트 프레임워크는 사용 중인 실제 테스트 프레임워크와는 무관하며 이를 통해 JUnit, TestNG 등 다양한 환경에서 테스트를 할 수 있습니다.